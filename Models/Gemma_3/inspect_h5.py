#!/usr/bin/env python3
"""
Inspect HDF5 files generated by Gemma 3 12B extraction script
Displays structure, metadata, and sample embeddings
"""

import h5py
import numpy as np
import argparse
import sys
from typing import Optional


def print_section(title: str):
    """Print formatted section header"""
    print(f"\n{'='*70}")
    print(f"  {title}")
    print(f"{'='*70}")


def inspect_metadata(h5_file: h5py.File):
    """Display file metadata"""
    print_section("FILE METADATA")

    if h5_file.attrs:
        for key, value in h5_file.attrs.items():
            print(f"  {key:20s}: {value}")
    else:
        print("  No metadata found")


def inspect_structure(h5_file: h5py.File, max_samples: int = 5):
    """Display HDF5 structure"""
    print_section("FILE STRUCTURE")

    question_ids = list(h5_file.keys())
    total_samples = len(question_ids)

    print(f"\n  Total Samples: {total_samples}")
    print(f"  Showing first {min(max_samples, total_samples)} samples:\n")

    for i, qid in enumerate(question_ids[:max_samples]):
        print(f"  [{i+1}] Question ID: {qid}")
        grp = h5_file[qid]

        # Display datasets in this group
        for key in grp.keys():
            item = grp[key]
            if isinstance(item, h5py.Dataset):
                if item.dtype == h5py.string_dtype():
                    print(f"      ├─ {key:30s} (string)")
                else:
                    print(f"      ├─ {key:30s} shape={item.shape}, dtype={item.dtype}")
            elif isinstance(item, h5py.Group):
                print(f"      ├─ {key}/ (group)")
                # Display datasets in subgroup
                for subkey in item.keys():
                    subitem = item[subkey]
                    if isinstance(subitem, h5py.Dataset):
                        print(f"      │  ├─ {subkey:25s} shape={subitem.shape}, dtype={subitem.dtype}")
        print()


def inspect_sample(h5_file: h5py.File, question_id: Optional[str] = None):
    """Display detailed information for a specific sample"""
    print_section("SAMPLE DETAILS")

    if question_id is None:
        # Use first sample
        question_ids = list(h5_file.keys())
        if not question_ids:
            print("  No samples found in file")
            return
        question_id = question_ids[0]

    if question_id not in h5_file:
        print(f"  Question ID '{question_id}' not found in file")
        return

    grp = h5_file[question_id]
    print(f"\n  Question ID: {question_id}\n")

    # Display text fields
    text_fields = ['question', 'image_id', 'answer', 'ground_truth_answer']
    for field in text_fields:
        if field in grp:
            value = grp[field][()].decode('utf-8') if isinstance(grp[field][()], bytes) else grp[field][()]
            print(f"  {field:25s}: {value}")

    # Display vision representation
    print(f"\n  Vision Representation:")
    if 'vision_representation' in grp:
        vis_rep = grp['vision_representation'][:]
        print(f"    Shape: {vis_rep.shape}")
        print(f"    Mean:  {vis_rep.mean():.6f}")
        print(f"    Std:   {vis_rep.std():.6f}")
        print(f"    Min:   {vis_rep.min():.6f}")
        print(f"    Max:   {vis_rep.max():.6f}")
    else:
        print(f"    Not available")

    # Display layer representations
    rep_types = [
        ('vision_token_representation', 'Vision Token Representations'),
        ('query_token_representation', 'Query Token Representations'),
        ('multimodal_representation', 'Multimodal Representations')
    ]

    for rep_key, rep_name in rep_types:
        print(f"\n  {rep_name}:")
        if rep_key in grp:
            rep_grp = grp[rep_key]
            layers = sorted(rep_grp.keys(), key=lambda x: int(x.split('_')[1]))

            for layer in layers:
                embedding = rep_grp[layer][:]
                print(f"    {layer:10s}: shape={embedding.shape}, "
                      f"mean={embedding.mean():7.4f}, std={embedding.std():7.4f}")
        else:
            print(f"    Not available")


def compare_samples(h5_file: h5py.File, n_samples: int = 3):
    """Compare embedding statistics across multiple samples"""
    print_section(f"EMBEDDING STATISTICS (across {n_samples} samples)")

    question_ids = list(h5_file.keys())[:n_samples]

    if not question_ids:
        print("  No samples found")
        return

    # Collect statistics
    stats = {
        'vision_rep': {'shapes': [], 'means': [], 'stds': []},
        'vision_token': {'shapes': [], 'means': [], 'stds': []},
        'query_token': {'shapes': [], 'means': [], 'stds': []},
        'multimodal': {'shapes': [], 'means': [], 'stds': []}
    }

    for qid in question_ids:
        grp = h5_file[qid]

        # Vision representation
        if 'vision_representation' in grp:
            vis_rep = grp['vision_representation'][:]
            stats['vision_rep']['shapes'].append(vis_rep.shape)
            stats['vision_rep']['means'].append(vis_rep.mean())
            stats['vision_rep']['stds'].append(vis_rep.std())

        # Layer representations
        for key, stat_key in [
            ('vision_token_representation', 'vision_token'),
            ('query_token_representation', 'query_token'),
            ('multimodal_representation', 'multimodal')
        ]:
            if key in grp:
                # Get first layer as representative
                layers = list(grp[key].keys())
                if layers:
                    embedding = grp[key][layers[0]][:]
                    stats[stat_key]['shapes'].append(embedding.shape)
                    stats[stat_key]['means'].append(embedding.mean())
                    stats[stat_key]['stds'].append(embedding.std())

    # Display statistics
    print("\n  Vision Representation:")
    if stats['vision_rep']['means']:
        print(f"    Shape:      {stats['vision_rep']['shapes'][0]}")
        print(f"    Mean (avg): {np.mean(stats['vision_rep']['means']):.6f}")
        print(f"    Std (avg):  {np.mean(stats['vision_rep']['stds']):.6f}")
    else:
        print(f"    Not available")

    for key, name in [
        ('vision_token', 'Vision Token (layer_0)'),
        ('query_token', 'Query Token (layer_0)'),
        ('multimodal', 'Multimodal (layer_0)')
    ]:
        print(f"\n  {name}:")
        if stats[key]['means']:
            print(f"    Shape:      {stats[key]['shapes'][0]}")
            print(f"    Mean (avg): {np.mean(stats[key]['means']):.6f}")
            print(f"    Std (avg):  {np.mean(stats[key]['stds']):.6f}")
        else:
            print(f"    Not available")


def main():
    parser = argparse.ArgumentParser(description="Inspect Gemma 3 12B HDF5 embeddings")
    parser.add_argument('h5_file', help='Path to HDF5 file')
    parser.add_argument('--question-id', help='Specific question ID to inspect')
    parser.add_argument('--max-samples', type=int, default=5, help='Max samples to show in structure view')
    parser.add_argument('--compare', type=int, default=3, help='Number of samples for statistics comparison')

    args = parser.parse_args()

    # Open HDF5 file
    try:
        with h5py.File(args.h5_file, 'r') as f:
            print(f"\n{'='*70}")
            print(f"  Inspecting: {args.h5_file}")
            print(f"{'='*70}")

            # Display metadata
            inspect_metadata(f)

            # Display structure
            inspect_structure(f, max_samples=args.max_samples)

            # Display sample details
            inspect_sample(f, question_id=args.question_id)

            # Compare samples
            compare_samples(f, n_samples=args.compare)

            print(f"\n{'='*70}\n")

    except FileNotFoundError:
        print(f"Error: File not found: {args.h5_file}")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
